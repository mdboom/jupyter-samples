cells:
- cell_type: markdown
  source: |-
    # IPy Parallel and R

    In this notebook, we'll use IPython.parallel (IPP) and rpy2 as a quick-and-dirty way of parallelizing work in R. We'll use a cluster of IPP engines running on the same VM as the notebook server to demonstarate. We'll also need to install [rpy2](http://rpy.sourceforge.net/) before we can start.

    `!pip install rpy2`
- cell_type: markdown
  source: |-
    ## Start Local IPP Engines

    First we must start a cluster of IPP engines. We can do this using the *Cluster* tab of the Jupyter dashboard. Or we can do it programmatically in the notebook.
- cell_type: code
  source: |-
    from IPython.html.services.clusters.clustermanager import ClusterManager
  metadata:
    collapsed: true
  execution_count: 20
- cell_type: code
  source: |-
    cm = ClusterManager()
  metadata:
    collapsed: true
  execution_count: 21
- cell_type: markdown
  source: |-
    We have to list the profiles before we can start anything, even if we know the profile name.
- cell_type: code
  source: |-
    cm.list_profiles()
  outputs:
  - output_type: execute_result
    data:
      text/plain: |-
        [{'profile': u'default',
          'profile_dir': u'/home/notebook/.ipython/profile_default',
          'status': 'stopped'},
         {'profile': u'remote',
          'profile_dir': u'/home/notebook/.ipython/profile_remote',
          'status': 'stopped'}]
    execution_count: 60
  metadata:
    collapsed: false
  execution_count: 60
- cell_type: markdown
  source: |-
    For our demo purposes, we'll just use the default profile which starts a cluster on the local machine for us.
- cell_type: code
  source: |-
    cm.start_cluster('default')
  outputs:
  - output_type: execute_result
    data:
      text/plain: |-
        {'n': 8,
         'profile': 'default',
         'profile_dir': u'/home/notebook/.ipython/profile_default',
         'status': 'running'}
    execution_count: 61
  metadata:
    collapsed: false
  execution_count: 61
- cell_type: markdown
  source: |-
    After running the command above, we need to pause for a few moments to let all the workers come up. (Breathe and count 10 ... 9 ... 8 ...) 

    Now we can continue to create a DirectView that can talk to all of the workers. (If you get an error, breathe, count so more, and try again in a few.)
- cell_type: code
  source: |-
    import IPython.parallel
  metadata:
    collapsed: false
  execution_count: 27
- cell_type: code
  source: |-
    client = IPython.parallel.Client()
  metadata:
    collapsed: false
  execution_count: 62
- cell_type: code
  source: |-
    dv = client[:]
  metadata:
    collapsed: false
  execution_count: 63
- cell_type: markdown
  source: |-
    In my case, I have 8 CPUs so I get 8 workers by default. Your number will likely differ.
- cell_type: code
  source: |-
    len(dv)
  outputs:
  - output_type: execute_result
    data:
      text/plain: |-
        8
    execution_count: 72
  metadata:
    collapsed: false
  execution_count: 72
- cell_type: markdown
  source: |-
    To ensure the workers are functioning, we can ask each one to run the bash command `echo $$` to print a PID.
- cell_type: code
  source: |-
    %%px
    !echo $$
  outputs:
  - output_type: stream
    name: stdout
    text: |
      [stdout:0] 12973
      [stdout:1] 12974
      [stdout:2] 12978
      [stdout:3] 12980
      [stdout:4] 12977
      [stdout:5] 12975
      [stdout:6] 12976
      [stdout:7] 12979
  metadata:
    collapsed: false
  execution_count: 64
- cell_type: markdown
  source: |-
    ## Use R on the Engines

    Next, we'll tell each engine to load the `rpy2.ipython` extension. In our local cluster, this step is easy because all of the workers are running in the same environment as the notebook server. If the engines were remote, we'd have many more installs to do.
- cell_type: code
  source: |-
    %%px
    %load_ext rpy2.ipython
  metadata:
    collapsed: false
  execution_count: null
- cell_type: markdown
  source: |-
    Now we can tell every engine to run R code using the `%%R` (or `%R`) magic. Let's sample 50 random numbers from a normal distribution.
- cell_type: code
  source: |-
    %%px
    %%R 
    x <- rnorm(50)
    summary(x)
  outputs:
  - output_type: display_data
    data:
      text/plain: |-
        [output:0]
  - output_type: display_data
    data:
      text/plain: |2
            Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
        -2.03500 -0.77970  0.05572 -0.07040  0.49570  2.31900 
    metadata:
      engine: 0
  - output_type: display_data
    data:
      text/plain: |-
        [output:1]
  - output_type: display_data
    data:
      text/plain: |2
            Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
        -2.00000 -0.74080  0.02746 -0.02496  0.53140  2.38700 
    metadata:
      engine: 1
  - output_type: display_data
    data:
      text/plain: |-
        [output:2]
  - output_type: display_data
    data:
      text/plain: |2
            Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
        -1.96800 -0.80070  0.07342 -0.05425  0.61380  2.01700 
    metadata:
      engine: 2
  - output_type: display_data
    data:
      text/plain: |-
        [output:3]
  - output_type: display_data
    data:
      text/plain: |2
            Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
        -2.81100 -0.44310  0.01515 -0.04424  0.49470  1.90200 
    metadata:
      engine: 3
  - output_type: display_data
    data:
      text/plain: |-
        [output:4]
  - output_type: display_data
    data:
      text/plain: |2
            Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
        -1.45400 -0.36850  0.04397  0.04665  0.42520  1.43300 
    metadata:
      engine: 4
  - output_type: display_data
    data:
      text/plain: |-
        [output:5]
  - output_type: display_data
    data:
      text/plain: |2
            Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
        -2.32200 -0.75890  0.01176  0.05932  0.87360  2.35100 
    metadata:
      engine: 5
  - output_type: display_data
    data:
      text/plain: |-
        [output:6]
  - output_type: display_data
    data:
      text/plain: |2
           Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
        -1.8590 -0.2639  0.1336  0.1777  0.8915  3.2200 
    metadata:
      engine: 6
  - output_type: display_data
    data:
      text/plain: |-
        [output:7]
  - output_type: display_data
    data:
      text/plain: |2
           Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
        -3.5150 -0.9433 -0.1412 -0.2161  0.5414  2.4960 
    metadata:
      engine: 7
  metadata:
    collapsed: false
  execution_count: 77
- cell_type: markdown
  source: |-
    ## Pull it Back to Python

    With our hack, we can't simply pull the R vectors back to the local notebook. (IPP can't pickle them.) But we can convert them to Python and pull the resulting objects back.
- cell_type: code
  source: |-
    %%px
    %Rpull x
    x = list(x)
  metadata:
    collapsed: false
  execution_count: 78
- cell_type: code
  source: |-
    x = dv.gather('x', block=True)
  metadata:
    collapsed: false
  execution_count: 79
- cell_type: markdown
  source: |-
    We should get 50 elements per engine.
- cell_type: code
  source: |-
    assert len(x) == 50 * len(dv)
  metadata:
    collapsed: false
  execution_count: 80
- cell_type: markdown
  source: |-
    ## Clean Up the Engines

    When we're done, we can clean up any engines started using the code at the top of this notebook with the following call.
- cell_type: code
  source: |-
    cm.stop_cluster('default')
  outputs:
  - output_type: execute_result
    data:
      text/plain: |-
        {'profile': u'default',
         'profile_dir': u'/home/notebook/.ipython/profile_default',
         'status': 'stopped'}
    execution_count: 81
  metadata:
    collapsed: false
  execution_count: 81
metadata:
  kernelspec:
    display_name: Python 2
    language: python
    name: python2
  language_info:
    codemirror_mode:
      name: ipython
      version: 2
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython2
    version: 2.7.6
nbformat: 4
nbformat_minor: 0
