<iframe srcdoc="<!DOCTYPE html>
<head>
   <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
   <link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.7/leaflet.css&quot; />
   <script src=&quot;http://cdn.leafletjs.com/leaflet-0.7/leaflet.js&quot;></script>
   <script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;></script>
   <script src=&quot;http://d3js.org/queue.v1.min.js&quot;></script>

   
   <script src=&quot;http://d3js.org/topojson.v1.min.js&quot;></script>
   
   

   <style>

      html, body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      .legend {
          padding: 0px 0px;
          font: 10px sans-serif;
          background: white;
          background: rgba(255,255,255,0.8);
          box-shadow: 0 0 15px rgba(0,0,0,0.2);
          border-radius: 5px;
      }

      .key path {
        display: none;
      }

   </style>
</head>

<body>

   <div id=&quot;map&quot; style=&quot;width: 800px; height: 500px&quot;></div>

   <script>

      queue()
          .defer(d3.json, 'tax_map.json')
          .defer(d3.json, 'us-states-10m.json')
          .await(makeMap)

      function makeMap(error, data_1,tjson_1) {

          
          topo_1 = topojson.feature(tjson_1, tjson_1.objects.states);
          

          

          function matchKey(datapoint, key_variable){
              if (typeof key_variable[0][datapoint] === 'undefined') {
                  return null;
              }
              else {
                  return parseFloat(key_variable[0][datapoint]);
              };
          };

          
          var color = d3.scale.threshold()
              .domain([0.0, 6680.9000000000005, 16702.25, 33404.5, 50106.75, 63468.549999999996])
              .range(['#F6EFF7', '#D0D1E6', '#A6BDDB', '#67A9CF', '#3690C0', '#02818A', '#016450']);
          

          var map = L.map('map').setView([40, -99], 4);

          L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 18,
              attribution: 'Map data (c) <a href=&quot;http://openstreetmap.org&quot;>OpenStreetMap</a> contributors'
          }).addTo(map);

          

          

          

          

          
          function style_1(feature) {
    return {
        fillColor: color(matchKey(feature.id, data_1)),
        weight: 1,
        opacity: 0.3,
        color: 'black',
        fillOpacity: 0.6
    };
}
          

          
          gJson_layer_1 = L.geoJson(topo_1, {style: style_1}).addTo(map)
          

          
              var legend = L.control({position: 'topright'});

    legend.onAdd = function (map) {var div = L.DomUtil.create('div', 'legend'); return div};

    legend.addTo(map);

    var x = d3.scale.linear()
    .domain([0, 69815])
    .range([0, 400]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient(&quot;top&quot;)
        .tickSize(1)
        .tickValues([0.0, 6680.9000000000005, 16702.25, 33404.5, 50106.75, 63468.549999999996]);

    var svg = d3.select(&quot;.legend.leaflet-control&quot;).append(&quot;svg&quot;)
        .attr(&quot;id&quot;, 'legend')
        .attr(&quot;width&quot;, 450)
        .attr(&quot;height&quot;, 40);

    var g = svg.append(&quot;g&quot;)
        .attr(&quot;class&quot;, &quot;key&quot;)
        .attr(&quot;transform&quot;, &quot;translate(25,16)&quot;);

    g.selectAll(&quot;rect&quot;)
        .data(color.range().map(function(d, i) {
          return {
            x0: i ? x(color.domain()[i - 1]) : x.range()[0],
            x1: i < color.domain().length ? x(color.domain()[i]) : x.range()[1],
            z: d
          };
        }))
      .enter().append(&quot;rect&quot;)
        .attr(&quot;height&quot;, 10)
        .attr(&quot;x&quot;, function(d) { return d.x0; })
        .attr(&quot;width&quot;, function(d) { return d.x1 - d.x0; })
        .style(&quot;fill&quot;, function(d) { return d.z; });

    g.call(xAxis).append(&quot;text&quot;)
        .attr(&quot;class&quot;, &quot;caption&quot;)
        .attr(&quot;y&quot;, 21)
        .text('Individual Income Taxes ($ Millions)');
          

      };

   </script>
</body>" style="width: 100%; height: 510px; border: none"></iframe>